#include <iostream>
#include <cmath> // For sqrt function in Triangle class

// Base class Shape with virtual functions
class Shape {
public:
    // Virtual destructor
    virtual ~Shape() {}

    // Pure virtual functions for area and perimeter
    virtual double area() const = 0;
    virtual double perimeter() const = 0;
};

// Derived class Rectangle
class Rectangle : public Shape {
private:
    double width;
    double height;

public:
    // Constructor to initialize Rectangle dimensions
    Rectangle(double w, double h) : width(w), height(h) {}

    // Override area function
    double area() const override {
        return width * height;
    }

    // Override perimeter function
    double perimeter() const override {
        return 2 * (width + height);
    }
};

// Derived class Triangle
class Triangle : public Shape {
private:
    double side1;
    double side2;
    double side3;

public:
    // Constructor to initialize Triangle sides
    Triangle(double a, double b, double c) : side1(a), side2(b), side3(c) {}

    // Override area function using Heron's formula
    double area() const override {
        double s = (side1 + side2 + side3) / 2;
        return sqrt(s * (s - side1) * (s - side2) * (s - side3));
    }

    // Override perimeter function
    double perimeter() const override {
        return side1 + side2 + side3;
    }
};

int main() {
    // Create a Rectangle object
    Rectangle rect(5.0, 3.0);
    std::cout << "Rectangle:" << std::endl;
    std::cout << "Area: " << rect.area() << std::endl;
    std::cout << "Perimeter: " << rect.perimeter() << std::endl;

    // Create a Triangle object
    Triangle tri(3.0, 4.0, 5.0);
    std::cout << "\nTriangle:" << std::endl;
    std::cout << "Area: " << tri.area() << std::endl;
    std::cout << "Perimeter: " << tri.perimeter() << std::endl;

    return 0;
}
