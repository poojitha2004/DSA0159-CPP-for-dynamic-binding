#include <iostream>
#include <string>

// Base class Employee
class Employee {
public:
    // Virtual destructor
    virtual ~Employee() {}

    // Pure virtual function to calculate pay
    virtual double calculatePay() const = 0;
};

// Derived class Manager from Employee
class Manager : public Employee {
private:
    double salary;
    double bonus;

public:
    // Constructor
    Manager(double s, double b) : salary(s), bonus(b) {}

    // Implement calculatePay() for Manager
    double calculatePay() const override {
        return salary + bonus;
    }
};

// Derived class Engineer from Employee
class Engineer : public Employee {
private:
    double hourlyRate;
    int hoursWorked;

public:
    // Constructor
    Engineer(double rate, int hours) : hourlyRate(rate), hoursWorked(hours) {}

    // Implement calculatePay() for Engineer
    double calculatePay() const override {
        return hourlyRate * hoursWorked;
    }
};

int main() {
    // Create objects of Manager and Engineer
    Manager mgr(80000, 5000); // Salary and bonus
    Engineer eng(50, 160);    // Hourly rate and hours worked

    // Array of pointers to Employee
    Employee* employees[2];
    employees[0] = &mgr;
    employees[1] = &eng;

    // Calculate and display pay for each employee
    for (int i = 0; i < 2; ++i) {
        std::cout << "Pay: $" << employees[i]->calculatePay() << std::endl;
    }

    return 0;
}
