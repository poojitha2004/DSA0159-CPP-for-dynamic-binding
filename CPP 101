#include <iostream>

// Base class
class Employee {
public:
    // Virtual function to be overridden by derived classes
    virtual double calculatePay() = 0; // Pure virtual function

    // Virtual destructor
    virtual ~Employee() {}
};

// Derived class Manager
class Manager : public Employee {
private:
    double baseSalary;
    double bonus;

public:
    // Constructor
    Manager(double baseSalary, double bonus) : baseSalary(baseSalary), bonus(bonus) {}

    // Override the calculatePay function
    double calculatePay() override {
        return baseSalary + bonus;
    }
};

// Derived class Engineer
class Engineer : public Employee {
private:
    double hourlyRate;
    int hoursWorked;

public:
    // Constructor
    Engineer(double hourlyRate, int hoursWorked) : hourlyRate(hourlyRate), hoursWorked(hoursWorked) {}

    // Override the calculatePay function
    double calculatePay() override {
        return hourlyRate * hoursWorked;
    }
};

int main() {
    // Create objects of derived classes
    Manager myManager(5000.0, 1500.0); // base salary and bonus
    Engineer myEngineer(50.0, 160);    // hourly rate and hours worked

    // Pointers to base class
    Employee* employee1 = &myManager;
    Employee* employee2 = &myEngineer;

    // Call calculatePay() function via base class pointers
    std::cout << "Manager's pay: $" << employee1->calculatePay() << std::endl;  // Outputs: Manager's pay: $6500
    std::cout << "Engineer's pay: $" << employee2->calculatePay() << std::endl; // Outputs: Engineer's pay: $8000

    return 0;
}
