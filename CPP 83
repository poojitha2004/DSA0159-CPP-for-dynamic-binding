#include <iostream>
#include <string>
using namespace std;

// Base class Employee
class Employee {
protected:
    string name;
    int id;
    double salary;

public:
    // Constructor
    Employee(string n = "", int i = 0, double s = 0.0) : name(n), id(i), salary(s) {}

    // Getter and Setter for name
    string getName() const { return name; }
    void setName(const string& n) { name = n; }

    // Getter and Setter for id
    int getId() const { return id; }
    void setId(int i) { id = i; }

    // Getter and Setter for salary
    double getSalary() const { return salary; }
    void setSalary(double s) { salary = s; }
};

// Derived class Manager
class Manager : public Employee {
private:
    string department;
    double bonus;

public:
    // Constructor
    Manager(string n = "", int i = 0, double s = 0.0, string d = "", double b = 0.0)
        : Employee(n, i, s), department(d), bonus(b) {}

    // Getter and Setter for department
    string getDepartment() const { return department; }
    void setDepartment(const string& d) { department = d; }

    // Getter and Setter for bonus
    double getBonus() const { return bonus; }
    void setBonus(double b) { bonus = b; }
};

// Derived class Engineer
class Engineer : public Employee {
private:
    string specialty;
    int hours;

public:
    // Constructor
    Engineer(string n = "", int i = 0, double s = 0.0, string sp = "", int h = 0)
        : Employee(n, i, s), specialty(sp), hours(h) {}

    // Getter and Setter for specialty
    string getSpecialty() const { return specialty; }
    void setSpecialty(const string& sp) { specialty = sp; }

    // Getter and Setter for hours
    int getHours() const { return hours; }
    void setHours(int h) { hours = h; }
};

int main() {
    // Create a Manager object
    Manager mgr("Alice", 101, 75000.0, "IT", 5000.0);
    cout << "Manager Details:" << endl;
    cout << "Name: " << mgr.getName() << endl;
    cout << "ID: " << mgr.getId() << endl;
    cout << "Salary: $" << mgr.getSalary() << endl;
    cout << "Department: " << mgr.getDepartment() << endl;
    cout << "Bonus: $" << mgr.getBonus() << endl;

    // Create an Engineer object
    Engineer eng("Bob", 102, 65000.0, "Software", 40);
    cout << "\nEngineer Details:" << endl;
    cout << "Name: " << eng.getName() << endl;
    cout << "ID: " << eng.getId() << endl;
    cout << "Salary: $" << eng.getSalary() << endl;
    cout << "Specialty: " << eng.getSpecialty() << endl;
    cout << "Hours: " << eng.getHours() << " hours/week" << endl;

    return 0;
}
