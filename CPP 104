#include <iostream>
#include <exception>

// Class to simulate a finally block using RAII
class Finally {
public:
    // Constructor that takes a function to be executed on destruction
    Finally(std::function<void()> func) : cleanupFunc(func) {}

    // Destructor that executes the cleanup function
    ~Finally() {
        if (cleanupFunc) {
            cleanupFunc();
        }
    }

private:
    std::function<void()> cleanupFunc;
};

// Function that throws an exception
void throwException() {
    throw std::runtime_error("An error occurred!");
}

int main() {
    try {
        std::cout << "Entering try block" << std::endl;

        // Scope guard to simulate a finally block
        Finally finallyBlock([]() {
            std::cout << "Executing cleanup code in the 'finally' block" << std::endl;
        });

        // Code that may throw an exception
        throwException();

        // This line won't be executed if an exception is thrown
        std::cout << "This line will not be executed if an exception is thrown" << std::endl;

    } catch (const std::exception& e) {
        std::cout << "Exception caught: " << e.what() << std::endl;
    }

    std::cout << "Outside try-catch block" << std::endl;

    return 0;
}
